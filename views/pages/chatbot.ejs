<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bazar Bridge Assistant - Your Grocery Chatbot</title>

    <!-- Essential CDNs for the Chatbot -->
    <!-- Tailwind CSS for modern styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Inter font for better typography -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <!-- React and ReactDOM for building the UI -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <!-- Babel for transforming JSX (React code) in the browser -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

    <style>
        /* Base styles to ensure the chatbot takes full screen height */
        html, body, #root {
            height: 100%; /* Ensures full height of the viewport */
            margin: 0;
            padding: 0;
            overflow: hidden; /* Prevents scrolling on the main page, chatbot content will scroll internally */
            font-family: 'Inter', sans-serif; /* Applies the Inter font */
        }
        #root {
            display: flex;
            flex-direction: column; /* Stacks header, chat area, and input vertically */
        }
    </style>
</head>
<body>

    <!-- The div where our React chatbot application will be mounted -->
    <div id="root"></div>

    <!-- The core JavaScript for the Bazar Bridge Assistant chatbot -->
    <script type="text/babel">
        // Main App component for the Bazar Bridge Assistant chatbot
        const App = () => {
            // State to store all chat messages (user and bot)
            const [messages, setMessages] = React.useState([]);
            // State to hold the current text input by the user
            const [input, setInput] = React.useState('');
            // State to indicate if the bot is currently processing a request
            const [isLoading, setIsLoading] = React.useState(false);

            // Ref to automatically scroll the chat window to the bottom
            const messagesEndRef = React.useRef(null);

            // Ref to prevent the initial effect from running multiple times in React's Strict Mode
            const hasInitialized = React.useRef(false);

            // Effect to scroll to the latest message whenever the messages state updates
            React.useEffect(() => {
                messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
            }, [messages]);

            // Function to send a message to the chatbot and get a response from the AI
            const sendMessage = async (messageText) => {
                if (messageText.trim() === '') return; // Do not send empty messages

                // Add user's message to display immediately in the chat UI
                setMessages(prevMessages => [...prevMessages, { sender: 'user', text: messageText }]);
                setIsLoading(true); // Show loading indicator

                try {
                    // IMPORTANT: YOU MUST PASTE YOUR GOOGLE AI STUDIO API KEY HERE!
                    // 1. Go to Google AI Studio: https://aistudio.google.com/app/apikey
                    // 2. Create a new API Key.
                    // 3. Replace the empty quotes below with your copied API Key.
                    //    Example: const apiKey = "YOUR_ACTUAL_API_KEY_STARTS_WITH_AIzaSy...";
                    const apiKey = "AIzaSyAICv_Yj5eFXsnagBtd_JMYnEVIxhIC_SQ"; // <--- PASTE YOUR ACTUAL API KEY HERE!

                    // Check if the API Key is provided. If not, inform the user directly in the chat.
                    if (!apiKey || apiKey === "YOUR_ACTUAL_API_KEY_HERE") {
                        setMessages(prevMessages => [...prevMessages, {
                            sender: 'bot',
                            text: "I can't generate a response because the Google AI Studio API Key is missing or incorrect in the code. Please open the HTML file in a text editor and paste your API key where indicated."
                        }]);
                        setIsLoading(false);
                        console.error("API Key is missing or incorrect. Please paste your Google AI Studio API Key into the code.");
                        return; // Stop execution if API key is missing
                    }

                    // Define the chatbot's persona and its capabilities for the Gemini API
                    const systemPrompt = `
                        You are "Bazar Bridge Assistant", a helpful, polite, and clear assistant for an online grocery delivery website.
                        Your primary goal is to assist users with their grocery shopping needs and provide excellent customer support.
                        You can handle the following types of queries:
                        - **Product Inquiries:** Provide information about products (e.g., availability, features, common uses, general price range).
                        - **Order Tracking:** Explain how to track an order and provide general status updates. If specific order details are needed, guide the user to check their order history on the website.
                        - **Delivery Time:** Give general information about delivery schedules and estimated times (e.g., "usually within 15-30 minutes," "depends on your location").
                        - **Returns:** Explain the return policy and process (e.g., "items can be returned within 7 days," "contact customer support for perishable items").
                        - **Payment Options:** List available payment methods (e.g., "credit/debit cards, UPI, net banking, cash on delivery").
                        - **Suggestions:** Offer suggestions for affordable or available items based on categories or general needs.
                        - **Out-of-Stock Alternatives:** If a user asks for an item that is out of stock, politely inform them and suggest similar alternatives or when it might be back in stock. For example, if "organic apples" are out, suggest "regular apples" or "pears."
                        - **General Customer Support:** Answer common questions related to the service, account, or app usage.
                        Always respond in a helpful, polite, and clear tone.
                        If you don't have specific real-time data (like exact stock levels, precise order numbers, or user-specific delivery addresses), explain that and guide the user on how they might find that information (e.g., "For the most accurate tracking, please check your order history on the website or app.").
                        Do not make up specific product names, prices, or exact stock quantities unless explicitly asked to generate examples or general categories. Focus on the *process* and *types* of information you can provide.
                        Keep responses concise but informative.
                    `;

                    // Prepare the full chat history for the API call to maintain context
                    let chatHistory = [{ role: "user", parts: [{ text: systemPrompt }] }];
                    // Add all previous messages to chat history
                    messages.forEach(msg => {
                        chatHistory.push({
                            role: msg.sender === 'user' ? 'user' : 'model',
                            parts: [{ text: msg.text }]
                        });
                    });
                    // Add the current message being sent by the user
                    chatHistory.push({ role: "user", parts: [{ text: messageText }] });
                    
                    const payload = { contents: chatHistory };
                    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                    // Make the API call to the Gemini model
                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    const result = await response.json(); // Parse the JSON response
                    console.log("Gemini API Response:", result); // Log the full response for debugging

                    // Process the bot's response from the API
                    if (result.candidates && result.candidates.length > 0 &&
                        result.candidates[0].content && result.candidates[0].content.parts &&
                        result.candidates[0].content.parts.length > 0) {
                        const botResponseText = result.candidates[0].content.parts[0].text;
                        setMessages(prevMessages => [...prevMessages, { sender: 'bot', text: botResponseText }]);
                    } else {
                        // Fallback message if the API response structure is unexpected
                        setMessages(prevMessages => [...prevMessages, { sender: 'bot', text: 'Oops! I seem to be having trouble getting a response from the AI. Please check the browser console for details.' }]);
                        console.error("Unexpected API response structure or missing content:", result);
                    }
                } catch (error) {
                    // Handle any errors during the API call (e.g., network issues)
                    console.error("Error fetching from Gemini API:", error);
                    setMessages(prevMessages => [...prevMessages, { sender: 'bot', text: 'I apologize, but there was an error connecting to the AI service. Please check your internet connection and the browser console for more details.' }]);
                } finally {
                    setIsLoading(false); // Hide loading indicator
                }
            };

            // This useEffect runs once when the component loads
            React.useEffect(() => {
                if (hasInitialized.current) return; // Prevents re-running in React's Strict Mode
                hasInitialized.current = true;

                // Set the initial welcome message with the emoji
                setMessages([{
                    sender: 'bot',
                    text: 'Hello! 👋 I am Bazar Bridge Assistant, your helpful guide for all your grocery needs. How can I assist you today?'
                }]);

                // Define the single question to be "asked" by the user upon loading.
                // The AI will generate the answer to this question.
                const initialQuestionForAI = "Tell me about your fresh produce?";

                // Simulate the user asking the question after a short delay for better visual flow
                setTimeout(() => {
                    sendMessage(initialQuestionForAI);
                }, 1500); // 1.5 second delay
            }, []); // Empty dependency array means this runs once on mount

            // Handle Enter key press in the input field
            const handleKeyPress = (e) => {
                if (e.key === 'Enter' && !isLoading) { // Only send if not currently loading
                    sendMessage(input); // Send the current input text
                    setInput(''); // Clear the input field after sending
                }
            };

            return (
                <div className="flex flex-col h-screen bg-gray-50 font-sans antialiased">
                    {/* Chatbot Header */}
                    <header className="bg-gradient-to-r from-purple-600 to-indigo-700 text-white p-4 shadow-lg rounded-b-xl">
                        <h1 className="text-3xl font-extrabold text-center tracking-wide">Bazar Bridge Assistant</h1>
                        <p className="text-center text-sm mt-1 opacity-90">Your helpful guide for all your grocery delivery needs!</p>
                    </header>

                    {/* Main Chat Display Area */}
                    <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-100">
                        {messages.map((msg, index) => (
                            <div key={index} className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                                <div className={`max-w-xs sm:max-w-md lg:max-w-lg p-4 rounded-xl shadow-md transition-all duration-300 ease-in-out ${
                                    msg.sender === 'user'
                                        ? 'bg-blue-500 text-white rounded-br-none transform translate-x-1' // User message style
                                        : 'bg-white text-gray-800 rounded-bl-none transform -translate-x-1' // Bot message style
                                }`}>
                                    <p className="text-base leading-relaxed">{msg.text}</p>
                                </div>
                            </div>
                        ))}
                        {/* Loading indicator (typing animation) */}
                        {isLoading && (
                            <div className="flex justify-start">
                                <div className="max-w-xs sm:max-w-md lg:max-w-lg p-4 rounded-xl shadow-md bg-white text-gray-800 rounded-bl-none">
                                    <div className="flex items-center space-x-2">
                                        <div className="w-2.5 h-2.5 bg-gray-500 rounded-full animate-bounce" style={{ animationDelay: '0s' }}></div>
                                        <div className="w-2.5 h-2.5 bg-gray-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                                        <div className="w-2.5 h-2.5 bg-gray-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                                    </div>
                                </div>
                            </div>
                        )}
                        <div ref={messagesEndRef} /> {/* Invisible element to scroll into view */}
                    </div>

                    {/* Input Area for typing messages */}
                    <div className="p-4 bg-white border-t border-gray-200 shadow-inner rounded-t-xl">
                        <div className="flex space-x-3">
                            <input
                                type="text"
                                className="flex-1 p-3.5 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-purple-400 transition duration-200 text-gray-700 placeholder-gray-400 text-base"
                                placeholder="Ask me anything about your groceries..."
                                value={input}
                                onChange={(e) => setInput(e.target.value)}
                                onKeyPress={handleKeyPress}
                                disabled={isLoading} /* Disable input while loading */
                            />
                            <button
                                className="px-6 py-3 bg-purple-600 text-white rounded-full font-semibold hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-400 transition duration-200 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed transform hover:scale-105"
                                onClick={() => { sendMessage(input); setInput(''); }} /* Send message and clear input */
                                disabled={isLoading} /* Disable button while loading */
                            >
                                Send
                            </button>
                        </div>
                    </div>
                </div>
            );
        };

        // Render the main App component into the 'root' div in the HTML body
        ReactDOM.render(<App />, document.getElementById('root'));
    </script>
    <!-- Chat Icon Button -->
<!-- Chatbot Popup Box (Hidden at Start) -->
<div id="chatbox" style="
  position: fixed;
  bottom: 90px;
  right: 20px;
  width: 300px;
  height: 400px;
  background-color: white;
  border: 1px solid #ccc;
  border-radius: 10px;
  display: none;
  z-index: 999;">
  
  <!-- Your Chatbot Code Here -->
  <iframe src="index.html" width="100%" height="100%" style="border: none;"></iframe>
</div>

<!-- Chat Icon Button -->
<div id="chat-toggle" style="
  position: fixed;
  bottom: 20px;
  right: 20px;
  background-color: #e74c3c;
  color: white;
  width: 60px;
  height: 60px;
  border-radius: 50%;
  text-align: center;
  font-size: 30px;
  line-height: 60px;
  cursor: pointer;
  z-index: 1000;">
  💬
</div>

<!-- Toggle Script -->
<script>
  const chatToggle = document.getElementById('chat-toggle');
  const chatbox = document.getElementById('chatbox');

  chatToggle.addEventListener('click', () => {
    chatbox.style.display = (chatbox.style.display === 'none') ? 'block' : 'none';
  });
</script>
</body>
</html>
